"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/webRTC/socket";
exports.ids = ["pages/api/webRTC/socket"];
exports.modules = {

/***/ "socket.io":
/*!****************************!*\
  !*** external "socket.io" ***!
  \****************************/
/***/ ((module) => {

module.exports = import("socket.io");;

/***/ }),

/***/ "(api)/./pages/api/webRTC/socket.tsx":
/*!*************************************!*\
  !*** ./pages/api/webRTC/socket.tsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var socket_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io */ \"socket.io\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([socket_io__WEBPACK_IMPORTED_MODULE_0__]);\nsocket_io__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// let createdRooms: string[] = [];\nconst SocketHandler = (_, res)=>{\n    if (res.socket.server.io) {\n        console.log(\"Socket is already attached\");\n        return res.end();\n    }\n    const io = new socket_io__WEBPACK_IMPORTED_MODULE_0__.Server(res.socket.server);\n    res.socket.server.io = io;\n    function publicRooms() {\n        const { sockets: { adapter: { sids , rooms  }  }  } = io;\n        const publicRooms = [];\n        rooms.forEach((_, key)=>{\n            if (sids.get(key) === undefined) {\n                publicRooms.push({\n                    roomName: key,\n                    roomSize: countRoomUser(key)\n                });\n            }\n        });\n        return publicRooms;\n    }\n    function countRoomUser(roomName) {\n        return io.sockets.adapter.rooms.get(roomName)?.size;\n    }\n    io.on(\"connection\", (socket)=>{\n        console.log(`[User Connected] : ${socket.id}`);\n        //peer가 room join 버튼을 눌렀을 경우 클라이언트에서 join이 트리거 되어 서버에 전달\n        socket.on(\"join\", (roomName)=>{\n            console.log(\"[join]\");\n            const { rooms  } = io.sockets.adapter;\n            const room = rooms.get(roomName);\n            //방이 없는 경우\n            if (room === undefined) {\n                console.log(\"[emit create]\");\n                socket.join(roomName);\n                socket.emit(\"created\");\n            } else if (room.size === 1) {\n                //방에 한 명만 있을 경우\n                console.log(\"[emit joined]\");\n                socket.join(roomName);\n                socket.emit(\"joined\");\n            } else {\n                //방에 두명인 경우 (full)\n                console.log(\"[emit full]\");\n                socket.emit(\"full\");\n            }\n            console.log(\"[room info] : \", rooms);\n            //사용자가 참가하여 방 상태가 변경되었으니 room-list emit\n            io.sockets.emit(\"room-list\", publicRooms());\n        });\n        //방에 참여한 사람이 connection 준비가 되면 ready가 트리거 됨\n        socket.on(\"ready\", (roomName)=>{\n            console.log(\"[emit ready]\");\n            socket.broadcast.to(roomName).emit(\"ready\");\n        });\n        //서버가 room의 peer로부터 \"icecandidate\"를 받을 때 트리거\n        socket.on(\"ice-candidate\", (candidate, roomName)=>{\n            console.log(\"[emit ice-candidate]\");\n            socket.broadcast.to(roomName).emit(\"ice-candidate\", candidate); // room에 있는 다른 peer에게 \"candidate\" emit\n        });\n        //서버가 room에 있는 peer로부터 \"offer\"를 받을 때 트리거\n        socket.on(\"offer\", (offer, roomName)=>{\n            console.log(\"[emit offer]\");\n            socket.broadcast.to(roomName).emit(\"offer\", offer); // room에 있는 다른 peer에게 \"offer\" emit\n        });\n        //서버가 room에 있는 peer로부터 \"answer\"를 받을 때 트리거\n        socket.on(\"answer\", (answer, roomName)=>{\n            console.log(\"[emit answer]\");\n            socket.broadcast.to(roomName).emit(\"answer\", answer); // room에 있는 다른 peer에게 \"answer\" emit\n        });\n        //서버가 room에 있는 peer로부터 \"leave\"를 받을 때 트리거\n        socket.on(\"leave\", (roomName)=>{\n            console.log(\"[emit leave]\", roomName);\n            socket.leave(roomName);\n            socket.broadcast.to(roomName).emit(\"leave\"); // room에 있는 다른 peer에게 \"leave\" emit\n            //방 상태가 변경 될 가능성이 있으니 room-list emit\n            io.sockets.emit(\"room-list\", publicRooms());\n        });\n        socket.on(\"room-list\", ()=>{\n            socket.emit(\"room-list\", publicRooms());\n            console.log(\"[room-list]\", publicRooms());\n        });\n        socket.on(\"request-create-room\", (roomName, done)=>{\n            console.log(\"[request-create-room]\", roomName);\n            const exists = publicRooms().find((createdRoom)=>createdRoom.roomName === roomName);\n            if (exists) {\n                console.log(\"[emit request-create-room : false]\");\n                done({\n                    success: false,\n                    payload: `${roomName}라는 방이 이미 존재합니다.`\n                });\n            } else {\n                console.log(\"[emit request-create-room : true]\");\n                done({\n                    success: true,\n                    payload: roomName\n                });\n            }\n        });\n        socket.on(\"request-join-room\", (roomName, done)=>{\n            console.log(\"[request-join-room]\", roomName);\n            const { rooms  } = io.sockets.adapter;\n            const room = rooms.get(roomName);\n            if (room === undefined || room.size >= 2) {\n                console.log(\"[emit request-join-room : false]\");\n                done({\n                    success: false,\n                    payload: `인원이 가득 찼습니다.`\n                });\n            } else {\n                console.log(\"[emit request-join-room : true]\");\n                done({\n                    success: true,\n                    payload: roomName\n                });\n            }\n        });\n        socket.on(\"peerleave\", (roomName)=>{\n            socket.broadcast.to(roomName).emit(\"leave\");\n            console.log(\"[emit reload]\");\n            socket.broadcast.to(roomName).emit(\"reload\");\n        });\n    });\n    return res.end();\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SocketHandler);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/webRTC/socket.tsx\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/webRTC/socket.tsx"));
module.exports = __webpack_exports__;

})();